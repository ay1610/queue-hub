name: PR Check

on:
  pull_request:
    branches: [main]

# Setting explicit permissions following the principle of least privilege
# See: https://docs.github.com/en/actions/security-guides/automatic-token-authentication#permissions-for-the-github_token
permissions:
  # Read access to contents for checkout and build/test operations
  contents: read
  # Write access to pull requests to post comments about build failures
  pull-requests: write

jobs:
  build-lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npx prisma generate

      - name: Lint
        id: lint
        run: npm run lint > lint_output.txt 2>&1 || echo "::set-output name=lint_failed::true" && cat lint_output.txt
        continue-on-error: true

      - name: Build
        id: build
        run: npm run build > build_output.txt 2>&1 || echo "::set-output name=build_failed::true" && cat build_output.txt
        continue-on-error: true

      - name: Check for failures
        if: steps.lint.outcome == 'failure' || steps.build.outcome == 'failure'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const lintFailed = ${{ steps.lint.outcome == 'failure' }};
            const buildFailed = ${{ steps.build.outcome == 'failure' }};
            
            let body = '## 🚨 Build Check Failed\n\n';
            
            if (lintFailed) {
              body += '- ❌ **Lint checks failed**\n';
              
              // Try to read and include lint errors
              try {
                let lintOutput = '';
                if (fs.existsSync('lint_output.txt')) {
                  lintOutput = fs.readFileSync('lint_output.txt', 'utf8');
                  
                  // Extract the most relevant parts of the lint output
                  // Get up to 15 lint errors to avoid extremely large comments
                  const errorLines = lintOutput.split('\n')
                    .filter(line => line.includes('error') || line.includes('warning'))
                    .slice(0, 15);
                  
                  if (errorLines.length > 0) {
                    body += '  <details>\n  <summary>Show lint errors</summary>\n\n  ```\n';
                    body += errorLines.join('\n');
                    body += '\n  ```\n';
                    
                    if (lintOutput.split('\n').filter(line => line.includes('error') || line.includes('warning')).length > 15) {
                      body += '\n  ... and more errors (see full log)\n';
                    }
                    
                    body += '  </details>\n\n';
                  } else {
                    body += '  - Please fix the code style issues identified by the linter\n\n';
                  }
                } else {
                  body += '  - Please fix the code style issues identified by the linter\n\n';
                }
              } catch (error) {
                console.log('Error reading lint output:', error);
                body += '  - Please fix the code style issues identified by the linter\n\n';
              }
            }
            
            if (buildFailed) {
              body += '- ❌ **Build process failed**\n';
              
              // Try to read and include build errors
              try {
                let buildOutput = '';
                if (fs.existsSync('build_output.txt')) {
                  buildOutput = fs.readFileSync('build_output.txt', 'utf8');
                  
                  // Extract the most relevant parts of the build output - focus on errors
                  const errorLines = buildOutput.split('\n')
                    .filter(line => 
                      line.includes('error') || 
                      line.includes('failed') || 
                      line.includes('ERR!') ||
                      line.match(/TS\d+:/)
                    )
                    .slice(0, 15);
                  
                  if (errorLines.length > 0) {
                    body += '  <details>\n  <summary>Show build errors</summary>\n\n  ```\n';
                    body += errorLines.join('\n');
                    body += '\n  ```\n';
                    
                    if (buildOutput.split('\n').filter(line => 
                      line.includes('error') || 
                      line.includes('failed') || 
                      line.includes('ERR!') ||
                      line.match(/TS\d+:/)
                    ).length > 15) {
                      body += '\n  ... and more errors (see full log)\n';
                    }
                    
                    body += '  </details>\n\n';
                  } else {
                    body += '  - The application code failed to compile\n  - Check the build logs for specific errors\n\n';
                  }
                } else {
                  body += '  - The application code failed to compile\n  - Check the build logs for specific errors\n\n';
                }
              } catch (error) {
                console.log('Error reading build output:', error);
                body += '  - The application code failed to compile\n  - Check the build logs for specific errors\n\n';
              }
            }
            
            body += 'See the [Actions tab](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) for more details.';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
            
            core.setFailed('Lint or build step failed');
