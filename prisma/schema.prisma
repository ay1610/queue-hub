
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model people {
  id      Int     @id @default(autoincrement())
  name    String? @db.VarChar(100)
  address String? @db.VarChar(255)
}

model User {
  id            String    @id
  name          String
  email         String    @unique
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  accounts      Account[]
  sessions      Session[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model WatchLater {
  id        Int      @id @default(autoincrement())
  userId    String
  mediaId   Int
  mediaType String
  addedAt   DateTime @default(now())

  @@unique([userId, mediaId, mediaType])
}

model runtime_data {
  tconst          String  @id @db.VarChar(20)
  title_type      String? @db.VarChar(20)
  primary_title   String?
  runtime_minutes Int?
}


model title_ratings {
  tconst         String   @id @db.VarChar(20)
  average_rating Float?
  num_votes      Int?
}

model Recommendation {
  id         Int      @id @default(autoincrement())
  fromUserId String   @db.VarChar
  toUserId   String   @db.VarChar
  mediaId    Int
  mediaType  String   @db.VarChar
  message    String
  createdAt  DateTime @default(now()) @db.Timestamp(6)

  @@unique([fromUserId, toUserId, mediaId, mediaType], map: "unique_recommendation")
}
